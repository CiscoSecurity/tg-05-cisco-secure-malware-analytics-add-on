import cx from 'classnames'
import PropTypes from 'prop-types'
import React, { forwardRef } from 'react'
import { Field, Formik, Form as FormikForm } from 'formik'
import { isEmpty } from 'lodash'

import { Stop } from '../Icons/Icons'

import styles from './Form.module.scss'

const Input = ({ field, ...props }) => (
  <input {...field} {...props} className="input" />
)

Input.propTypes = {
  field: PropTypes.object
}

const Form = forwardRef(({ initialValues, onSubmit, fields, validationSchema, setDisableSubmit }, ref) => {
  return (
    <Formik initialValues={initialValues} onSubmit={onSubmit} validationSchema={validationSchema}>
      {({ isSubmitting, submitForm, errors }) => {
        if (ref) ref.current = { submitForm }
        setDisableSubmit(isSubmitting || !isEmpty(errors))

        return (
          <FormikForm>
            <div className="form-group">
              {fields?.map(({ type, name, label, as, helpText, options, disabled }) => (
                <div className={cx(styles.formGroup, 'form-group__text')} key={name}>
                  {label &&
                    <label className={cx(styles.label, 'label')} htmlFor={name}>{label}</label>}
                  {as === 'select'
                    ? (
                      <Field type={name} name={name} as={as}>
                        {options.map(({ value, view }) => (
                          <option key={value} value={value}>{view}</option>
                        ))}
                      </Field>
                    )
                    : <Field disabled={disabled} type={type || name} name={name} as={as || 'input'} component={Input}/>
                  }
                  <div className={cx(styles.helpBlock, 'help-block')}>
                    {errors[name] && <Stop />}
                    <span className={cx(
                      'help-block__text',
                      errors[name] && 'help-block__text--state-danger'
                    )}>
                      {errors[name] || helpText}
                    </span>
                  </div>
                </div>
              ))}
            </div>
          </FormikForm>
        )
      }}
    </Formik>
  )
})

Form.propTypes = {
  initialValues: PropTypes.object.isRequired,
  validationSchema: PropTypes.object,
  onSubmit: PropTypes.func.isRequired,
  fields: PropTypes.arrayOf(PropTypes.shape({
    type: PropTypes.string.isRequired,
    as: PropTypes.string,
    label: PropTypes.string
  })).isRequired,
  submitText: PropTypes.string,
  setDisableSubmit: PropTypes.func
}

Form.displayName = 'Form'

export default Form
