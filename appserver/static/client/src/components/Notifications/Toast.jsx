import { PropTypes } from 'prop-types'
import { useEffect } from 'react'
import {
  CSSTransition,
  TransitionGroup,
} from 'react-transition-group'
import { useDispatch, useSelector } from 'react-redux'

import { Critical, Good, Info, Warning } from '../Icons/Icons'
import { deQueueToast } from './ToastSlice'

import styles from './Toast.module.scss'

const iconClassMap = new Map([
  ['information', ''],
  ['success', 'good'],
  ['warning', 'warning'],
  ['error', 'critical-stop'],
])

const iconMap = new Map([
  ['information', <Info />],
  ['success', <Good />],
  ['warning', <Warning />],
  ['error', <Critical />],
])

export const ToastContent = ({
  toastLevel,
  title,
  message,
  getToastLevel,
}) => (
  <div className="toast">
    <div className={`toast__icon icon-${iconClassMap.get(toastLevel)}`}>{iconMap.get(toastLevel)}</div>
    <div className="toast__body">
      <div className="toast__title">{title || getToastLevel(toastLevel)}</div>
      <div className="toast__message">{message}</div>
    </div>
  </div>
)

export const Toast = () => {
  const dispatch = useDispatch()
  const queue = useSelector(state => state.toast.queue)

  useEffect(() => {
    const removalTimeout = setTimeout(() => {

      dispatch(deQueueToast())
    }, 5000)

    if (queue.length === 0) {
      clearTimeout(removalTimeout)
    }

    return () => {
      clearTimeout(removalTimeout)
    }
  }, [queue]) // eslint-disable-line

  return (
    <div className={styles.toastContainer}>
      <TransitionGroup component={null}>
        {
          queue.map((toast, idx) => (
            <CSSTransition
              key={idx}
              timeout={200}
              classNames="item"
            >
              <>
                <ToastContent
                  {...{ ...toast }}
                />
                <br/>
              </>
            </CSSTransition>
          ))
        }
      </TransitionGroup>
    </div>
  )
}

ToastContent.propTypes = {
  toastLevel: PropTypes.string,
  title: PropTypes.string,
  message: PropTypes.string,
  getToastLevel: PropTypes.func,
}

export default Toast
