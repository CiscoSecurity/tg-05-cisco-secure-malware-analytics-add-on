import * as yup from 'yup'
import { omit } from 'lodash'

import {
  ADD_MODAL_SUBMIT_BUTTON,
  CLONE_MODAL_SUBMIT_BUTTON,
  DELETE_MODAL_SUBMIT_BUTTON,
  EDIT_MODAL_SUBMIT_BUTTON,
  MODAL_CANCEL_BUTTON
} from '../../constants'
import { createAccount, deleteAccount, editAccount } from './AccountSlice'

export const ADD_ACCOUNT_BUTTON = 'Add Account'

export const ACCOUNT_NAME_COLUMN_TITLE = 'Account Name'
export const HOST_COLUMN_TITLE = 'Host'
export const API_KEY_COLUMN_TITLE = 'API Key'

export const ACCOUNT_TABLE_SORT_FUNCTIONS = {
  [ACCOUNT_NAME_COLUMN_TITLE]: (array) => array.sort((a, b) => a.name - b.name),
  [HOST_COLUMN_TITLE]: (array) => array.sort((a, b) => a.content.host - b.content.host),
}

export const ACCOUNT_HEADER_COLUMN_TITLES = [
  ACCOUNT_NAME_COLUMN_TITLE,
  HOST_COLUMN_TITLE
]

export const CREATE_ACCOUNT_MODAL = 'Add Account'
export const EDIT_ACCOUNT_MODAL = 'Update Account'
export const CLONE_ACCOUNT_MODAL = 'Clone Account'
export const DELETE_ACCOUNT_MODAL = 'Delete Confirmation'

export const getAccountValidationSchema = (inputNames, isEdit) => {
  const schema = {
    name: yup
      .string()
      .required('The name is required.')
      .notOneOf(inputNames, 'Name is already in use.')
      .matches(/^[A-Za-z][A-Za-z0-9_]*$/, 'Account Name must start with a letter and followed by alphabetic letters, digits or underscores'),
    host: yup.string().required('The host is required.'),
    api_key: yup.string().required('The API Key is required.'),
  }

  return yup.object().shape(isEdit ? omit(schema, ['name']) : schema)
}

export const getAccountFields = (disableName) => ([
  {
    name: 'name',
    label: 'Account Name',
    helpText: 'Enter a unique name for this account.',
    disabled: disableName
  },
  {
    name: 'host',
    label: 'Host',
    helpText: 'Enter the Host for this account.'
  },
  {
    name: 'api_key',
    label: 'API Key',
    type: 'password',
    helpText: 'Enter the API Key for this account.'
  }
])

export const getCreateAccountModalVerbiage = ({ dispatch, accountNames }) => ({
  title: CREATE_ACCOUNT_MODAL,
  formProps: {
    validationSchema: getAccountValidationSchema(accountNames),
    fields: getAccountFields(),
    onSubmit: values => dispatch(createAccount(values)),
    initialValues: {
      name: '',
      host: '',
      api_key: ''
    }
  },
  cancel: MODAL_CANCEL_BUTTON,
  submit: ADD_MODAL_SUBMIT_BUTTON
})

export const getEditAccountModalVerbiage = ({
  dispatch,
  accountNames,
  account: { name, content: { host } }
}) => ({
  title: EDIT_ACCOUNT_MODAL,
  formProps: {
    validationSchema: getAccountValidationSchema(accountNames, true),
    fields: getAccountFields(true),
    onSubmit: values => dispatch(editAccount(values)),
    initialValues: { name, host, api_key: '' }
  },
  cancel: MODAL_CANCEL_BUTTON,
  submit: EDIT_MODAL_SUBMIT_BUTTON
})

export const getCloneAccountModalVerbiage = ({
  dispatch,
  accountNames,
  account: { name, content: { host } }
}) => ({
  title: CLONE_ACCOUNT_MODAL,
  formProps: {
    validationSchema: getAccountValidationSchema(accountNames),
    fields: getAccountFields(),
    onSubmit: values => dispatch(createAccount(values)),
    initialValues: { name: '', host, api_key: '' }
  },
  cancel: MODAL_CANCEL_BUTTON,
  submit: CLONE_MODAL_SUBMIT_BUTTON
})

export const getDeleteAccountModalVerbiage = ({ dispatch, account }) => ({
  title: DELETE_ACCOUNT_MODAL,
  cancel: MODAL_CANCEL_BUTTON,
  submit: DELETE_MODAL_SUBMIT_BUTTON,
  body: `Are you sure you want to delete "${account.name}"? 
  Ensure that no input is configured with "${account.name}" as this will stop data collection for that input.`,
  submitModal: () => dispatch(deleteAccount(account))
})
