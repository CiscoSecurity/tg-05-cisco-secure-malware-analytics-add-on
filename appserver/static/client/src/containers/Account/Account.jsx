import cx from 'classnames'
import { useEffect, useState } from 'react'
import { useDispatch, useSelector } from 'react-redux'
import { HeaderCellSort, useSort } from '@table-library/react-table-library/sort'
import { Header, HeaderCell, HeaderRow, Table } from '@table-library/react-table-library'
import { isEmpty } from 'lodash'

import TableBody from './TableBody'
import Select from '../../components/Select/Select'
import Search from '../../components/Search/Search'
import Pagination from '../../components/Pagination/Pagination'
import {
  ACCOUNT_HEADER_COLUMN_TITLES,
  ACCOUNT_TABLE_SORT_FUNCTIONS,
  ADD_ACCOUNT_BUTTON,
  API_KEY_COLUMN_TITLE,
  getCreateAccountModalVerbiage
} from './constants'
import { ACTIONS_COLUMN_TITLE, PER_PAGE_OPTIONS, SORT_ICON_PROPS } from '../../constants'
import { handleFilterAccounts } from './helpers'
import { fetchAccounts, setAccountsPage, setAccountsPerPageOption } from './AccountSlice'
import { showModal } from '../../components/Modal/ModalSlice'

import styles from './Account.module.scss'

const Account = () => {
  const dispatch = useDispatch()
  const { data: accounts, perPage, currentPage, pages } = useSelector((state) => state.accounts.accounts)

  const [filter, setFilter] = useState('')
  const [filteredAccounts, setFilteredAccounts] = useState(accounts)
  const [paginatedData, setPaginatedData] = useState(filteredAccounts)

  useEffect(() => {
    if (isEmpty((accounts))) {
      dispatch(fetchAccounts())
    }
  }, [accounts]) //eslint-disable-line

  useEffect(() => {
    setFilteredAccounts(filter ? accounts?.filter(e => handleFilterAccounts(filter, e)) : accounts)
  }, [filter, accounts])

  useEffect(() => {
    setPaginatedData(filteredAccounts.slice(
      (currentPage - 1) * perPage,
      currentPage * perPage
    ))
  }, [filteredAccounts, currentPage, perPage])

  const sort = useSort({ nodes: filteredAccounts }, {}, { sortFns: ACCOUNT_TABLE_SORT_FUNCTIONS, })

  const handleCreateAccount = () => {
    dispatch(showModal(getCreateAccountModalVerbiage({ dispatch, accountNames: accounts.map(account => account.name) })))
  }

  return (
    <div className={styles.pageContainer}>
      <div className={styles.tableActions}>
        <span className={styles.accountsCount}>
          {`${filteredAccounts.length} ${filteredAccounts.length === 1 ? 'account' : 'accounts'}`}
        </span>
        <Select
          onChange={value => dispatch(setAccountsPerPageOption(value))}
          options={PER_PAGE_OPTIONS}
          selected={perPage}
        />
        <Search value={filter} onChange={setFilter}/>
        {pages > 1 && <Pagination
          pages={pages}
          setPage={page => dispatch(setAccountsPage(page))}
          currentPage={currentPage}
        />}
        <button className="btn btn--primary" onClick={handleCreateAccount}>
          {ADD_ACCOUNT_BUTTON}
        </button>
      </div>
      <div className={styles.tableWrapper}>
        <Table
          className={cx('table', styles.table)}
          data={{ nodes: paginatedData }}
          sort={sort}
          layout={{ fixedHeader: true }}
        >
          {(tableList) => (
            <>
              <Header>
                <HeaderRow className="table__header-row">
                  {ACCOUNT_HEADER_COLUMN_TITLES.map(title => (
                    <HeaderCellSort
                      key={title}
                      sortKey={title}
                      sortIcon={SORT_ICON_PROPS}
                      className={cx(styles.headerCell, 'table__header-cell')}
                    >
                      {title}
                    </HeaderCellSort>
                  ))}
                  <HeaderCell className={cx(styles.headerCell, 'table__header-cell')}>
                    {API_KEY_COLUMN_TITLE}
                  </HeaderCell>
                  <HeaderCell className={cx(styles.headerCell, 'table__header-cell')}>
                    {ACTIONS_COLUMN_TITLE}
                  </HeaderCell>
                </HeaderRow>
              </Header>
              <TableBody tableList={tableList}/>
            </>
          )}
        </Table>
      </div>
    </div>
  )
}

export default Account
