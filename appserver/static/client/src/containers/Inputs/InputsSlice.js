import { splunkdPath, app } from '@splunk/splunk-utils/config'
import { defaultFetchInit } from '@splunk/splunk-utils/fetch'
import { createAsyncThunk, createSlice, isAnyOf } from '@reduxjs/toolkit'
import { omit } from 'lodash'

const apiPath = `${splunkdPath}/servicesNS/nobody/${app}`
const inputUrl = 'TA_cisco_secure_malware_analytics_cisco_secure_malware_analytics_input'

export const fetchInputs = createAsyncThunk(
  'fetchInputs',
  async () => await fetch(
      `${apiPath}/${inputUrl}?count=-1&output_mode=json`,
      {
        method: 'GET'
      }
  ).then((response) => response.json())
)

export const fetchIndexes = createAsyncThunk(
  'fetchIndexes',
  async () => await fetch(
      `${apiPath}/data/indexes?output_mode=json&count=-1`,
      {
        method: 'GET'
      }
  ).then((response) => response.json())
)

export const createInput = createAsyncThunk(
  'createInput',
  async (data, { dispatch }) => await fetch(
      `${apiPath}/${inputUrl}?output_mode=json`,
      {
        method: 'POST',
        body: new URLSearchParams(data),
        headers: defaultFetchInit.headers
      }
  ).then(() => dispatch(fetchInputs()))
)

export const changeInputStatus = createAsyncThunk(
  'changeInputStatus',
  async ({ name, disabled }, { dispatch }) => await fetch(
      `${apiPath}/${inputUrl}/${name}?output_mode=json`,
      {
        method: 'POST',
        body: new URLSearchParams({ disabled }),
        headers: defaultFetchInit.headers
      }
  ).then(() => dispatch(fetchInputs()))
)

export const editInput = createAsyncThunk(
  'editInput',
  async (input, { dispatch }) => await fetch(
      `${apiPath}/${inputUrl}/${input.name}?output_mode=json`,
      {
        method: 'POST',
        body: new URLSearchParams(omit(input, ['name'])),
        headers: defaultFetchInit.headers
      }
  ).then(() => dispatch(fetchInputs()))
)

export const deleteInput = createAsyncThunk(
  'deleteInput',
  async (input, { dispatch }) => await fetch(
      `${apiPath}/${inputUrl}/${input.name}?output_mode=json`,
      {
        method: 'DELETE',
        headers: defaultFetchInit.headers
      }
  ).then(() => dispatch(fetchInputs()))
)

const initialState = {
  inputs: {
    data: [],
    pending: false,
    perPage: 10,
    pages: 1,
    currentPage: 1
  },
  indexes: []
}

export const inputsSlice = createSlice({
  name: 'inputs',
  initialState,
  reducers: {
    setPerPageOption(state, action) {
      state.inputs.perPage = action.payload
      state.inputs.pages = Math.ceil(state.inputs.data.length / action.payload)
      state.inputs.currentPage = 1
    },
    setPage(state, action) {
      state.inputs.currentPage = action.payload
    }
  },
  extraReducers: async (builder) => {
    builder.addCase(fetchInputs.pending, (state) => {
      state.inputs = {
        ...state.inputs,
        pending: true
      }
    })
    builder.addCase(fetchInputs.fulfilled, (state, action) => {
      state.inputs = {
        ...state.inputs,
        data: action.payload.entry,
        pending: false,
        pages: Math.ceil(action.payload.entry.length / state.inputs.perPage)
      }
    })
    builder.addCase(fetchIndexes.pending, (state) => {
      state.indexes = {
        ...state.indexes,
        pending: true
      }
    })
    builder.addCase(fetchIndexes.fulfilled, (state, action) => {
      state.indexes = {
        ...state.indexes,
        data: action.payload.entry,
        pending: false,
      }
    })
    builder.addMatcher(
      isAnyOf(createInput.pending, editInput.pending, deleteInput.pending, changeInputStatus.pending),
      (state) => {
        state.inputs.pending = true
      }
    )
    builder.addMatcher(
      isAnyOf(
        editInput.rejected,
        editInput.fulfilled,
        createInput.rejected,
        createInput.fulfilled,
        deleteInput.rejected,
        deleteInput.fulfilled,
        changeInputStatus.rejected,
        changeInputStatus.fulfilled
      ),
      (state) => {
        state.inputs.pending = false
      }
    )
  }
})

export const {
  setPerPageOption,
  setPage
} = inputsSlice.actions

export default inputsSlice.reducer
