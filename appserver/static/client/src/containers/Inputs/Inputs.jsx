import cx from 'classnames'
import { Fragment, useEffect, useState } from 'react'
import { useDispatch, useSelector } from 'react-redux'
import { HeaderCellSort, useSort } from '@table-library/react-table-library/sort'
import {
  Header,
  HeaderCell,
  HeaderRow,
  Table
} from '@table-library/react-table-library'

import Select from '../../components/Select/Select'
import Search from '../../components/Search/Search'
import { fetchIndexes, fetchInputs, setPage, setPerPageOption } from './InputsSlice'
import {
  CREATE_INPUT_BUTTON_TEXT,
  getCreateInputModalVerbiage,
  HEADER_COLUMN_TITLES,
  INPUTS_DESCRIPTION,
  TABLE_SORT_FUNCTIONS
} from './constants'
import { createOptions, handleFilterInputs } from './helpers'
import TableBody from './TableBody'
import Pagination from '../../components/Pagination/Pagination'
import { showModal } from '../../components/Modal/ModalSlice'
import { ACTIONS_COLUMN_TITLE, PER_PAGE_OPTIONS, SORT_ICON_PROPS } from '../../constants'
import { fetchAccounts } from '../Account/AccountSlice'
import PageLoader from '../../components/Loader/PageLoader'

import styles from './Inputs.module.scss'

const Inputs = () => {
  const dispatch = useDispatch()
  const { data: inputs, perPage, currentPage, pages, pending: inputsPending } = useSelector((state) => state.inputs.inputs)
  const { data: indexes, pending: indexesPending } = useSelector((state) => state.inputs.indexes)
  const { data: accounts, pending: accountsPending } = useSelector((state) => state.accounts.accounts)

  const [filter, setFilter] = useState('')
  const [filteredInputs, setFilteredInputs] = useState(inputs)
  const [paginatedData, setPaginatedData] = useState(filteredInputs)

  useEffect(() => {
    dispatch(fetchInputs())
    dispatch(fetchIndexes())
    dispatch(fetchAccounts())
  }, []) //eslint-disable-line

  useEffect(() => {
    setFilteredInputs(filter ? inputs.filter(e => handleFilterInputs(filter, e)) : inputs)
  }, [filter, inputs])

  useEffect(() => {
    setPaginatedData(filteredInputs.slice(
      (currentPage - 1) * perPage,
      currentPage * perPage
    ))
  }, [filteredInputs, currentPage, perPage])

  const sort = useSort({ nodes: filteredInputs }, {}, { sortFns: TABLE_SORT_FUNCTIONS, })
  const isPending = inputsPending || indexesPending || accountsPending

  const handleCreateInput = () => {
    dispatch(showModal(getCreateInputModalVerbiage({
      dispatch,
      options: createOptions(indexes),
      inputNames: inputs.map(input => input.name),
      accounts: createOptions(accounts)
    })))
  }

  return (
    <div className={styles.pageContainer}>
      {isPending && <PageLoader defaultStyle="centered" size="medium" />}
      <div className={styles.descriptionContainer}>
        {INPUTS_DESCRIPTION}
        <button className="btn btn--primary" onClick={handleCreateInput}>
          {CREATE_INPUT_BUTTON_TEXT}
        </button>
      </div>
      <div className={styles.tableActions}>
        <span className={styles.inputsCount}>
          {`${filteredInputs.length} ${filteredInputs.length === 1 ? 'input' : 'inputs'}`}
        </span>
        <Select
          onChange={value => dispatch(setPerPageOption(value))}
          options={PER_PAGE_OPTIONS}
          selected={perPage}
        />
        <Search value={filter} onChange={setFilter} />
        {pages > 1 && <Pagination
          pages={pages}
          setPage={page => dispatch(setPage(page))}
          currentPage={currentPage}
        />}
      </div>
      <div className={styles.tableWrapper}>
        <Table
          className={cx('table', styles.table)}
          data={{ nodes: paginatedData }}
          sort={sort}
          layout={{ fixedHeader: true }}
        >
          {(tableList) => (
            <>
              <Header>
                <HeaderRow className="table__header-row">
                  {HEADER_COLUMN_TITLES.map(title => (
                    <HeaderCellSort
                      key={title}
                      sortKey={title}
                      sortIcon={SORT_ICON_PROPS}
                      className={cx(styles.headerCell, 'table__header-cell')}
                    >
                      {title}
                    </HeaderCellSort>
                  ))}
                  <HeaderCell className={cx(styles.headerCell, 'table__header-cell')}>
                    {ACTIONS_COLUMN_TITLE}
                  </HeaderCell>
                </HeaderRow>
              </Header>
              <TableBody tableList={tableList} />
            </>
          )}
        </Table>
      </div>
    </div>
  )
}

export default Inputs
