import { locale } from '@splunk/splunk-utils/config'
import * as yup from 'yup'

import { Down, Up } from '../../components/Icons/Icons'
import { createInput } from './InputsSlice'

import styles from './Inputs.module.scss'

export const INPUTS_DESCRIPTION = 'Manage your data inputs'

export const CREATE_INPUT_BUTTON_TEXT = 'Create New Search'

export const PER_PAGE_OPTIONS = [
  {
    value: 10,
    title: '10 Per Page'
  },
  {
    value: 25,
    title: '25 Per Page'
  },
  {
    value: 50,
    title: '50 Per Page'
  }
]

export const NAME_COLUMN_TITLE = 'Name'
export const INTERVAL_COLUMN_TITLE = 'Interval'
export const INDEX_COLUMN_TITLE = 'Index'
export const STATUS_COLUMN_TITLE = 'Status'
export const ACTIONS_COLUMN_TITLE = 'Actions'

export const TABLE_SORT_FUNCTIONS = {
  [NAME_COLUMN_TITLE]: (array) => array.sort((a, b) => a.content.name - b.content.name),
  [INTERVAL_COLUMN_TITLE]: (array) => array.sort((a, b) => a.content.interval - b.deadline),
  [INDEX_COLUMN_TITLE]: (array) => array.sort((a, b) => a.content.index - b.content.index),
  [STATUS_COLUMN_TITLE]: (array) => array.sort((a, b) => a.content.disabled - b.content.disabled),
}

export const SORT_ICON_PROPS = {
  iconUp: <Up />,
  iconDown: <Down />,
  iconDefault: <div className={styles.sortIcons}><Up/><Down/></div>
}

export const HEADER_COLUMN_TITLES = [
  NAME_COLUMN_TITLE,
  INTERVAL_COLUMN_TITLE,
  INDEX_COLUMN_TITLE,
  STATUS_COLUMN_TITLE
]

export const CONTROLLER_URL = `/${locale}/custom/amp4e_events_input/amp_streams_api_controller/`

export const MODEL_CANCEL_BUTTON = 'Cancel'
export const MODEL_SUBMIT_BUTTON = 'Yes, Delete'

export const CREATE_INPUT_MODAL = 'Add Cisco Secure Malware Analytics'

export const getCreateInputValidationSchema = (inputNames) => yup.object().shape({
  name: yup.string().required('The name is required.').notOneOf(inputNames, 'Name is already in use.'),
  interval: yup.string().required('The interval is required.'),
  index: yup.string().required('The Index is required.'),
  threat_grid_host: yup.string().required('The host is required.'),
  api_key: yup.string().required('The API Key is required.'),
  after: yup.string().required('The After field is required.'),
  builtin_system_checkpoint_storage_type: yup.string().required('The type is required.'),
})

export const getCreateInputFields = (options) => ([
  {
    type: 'name',
    label: 'Name',
    helpText: 'Enter a unique name for the data input'
  },
  {
    type: 'interval',
    label: 'Interval',
    helpText: 'Time interval in seconds between API queries. Should be set to 300.'
  },
  {
    type: 'index',
    label: 'Index',
    as: 'select',
    options: [{ view: 'default', value: 'default' }, ...options]
  },
  {
    type: 'threat_grid_host',
    label: 'Threat Grid Host',
    helpText: 'Enter the Threat Grid host the input should connect to'
  },
  {
    type: 'api_key',
    label: 'API Key',
    helpText: 'Enter your Threat Grid API Key'
  },
  {
    type: 'after',
    label: 'After',
    helpText: 'The initial after value used when querying the Threat Grid API. Should be 10 minutes ago.'
  },
  {
    type: 'builtin_system_checkpoint_storage_type',
    label: 'Checkpoint type',
    as: 'select',
    options: [
      { value: 'auto', view: 'Auto' },
      { value: 'file', view: 'View' },
      { value: 'optional', view: 'optional' }
    ]
  }
])

export const getCreateInputModalVerbiage = (dispatch, options, inputNames) => ({
  title: CREATE_INPUT_MODAL,
  formProps: {
    validationSchema: getCreateInputValidationSchema(inputNames),
    fields: getCreateInputFields(options),
    onSubmit: values => dispatch(createInput(values)),
    initialValues: {
      name: '',
      interval: 300,
      index: 'default',
      threat_grid_host: 'panacea.threatgrid.com',
      api_key: '',
      after: '10 minutes ago',
      builtin_system_checkpoint_storage_type: 'auto'
    }
  },
  cancel: MODEL_CANCEL_BUTTON,
  submit: MODEL_SUBMIT_BUTTON
})
