import { locale } from '@splunk/splunk-utils/config'
import * as yup from 'yup'
import { omit } from 'lodash'

import { Down, Up } from '../../components/Icons/Icons'
import { createInput, deleteInput, editInput } from './InputsSlice'

import styles from './Inputs.module.scss'

export const INPUTS_DESCRIPTION = 'Manage your data inputs'

export const CREATE_INPUT_BUTTON_TEXT = 'Create New Search'

export const PER_PAGE_OPTIONS = [
  {
    value: 10,
    title: '10 Per Page'
  },
  {
    value: 25,
    title: '25 Per Page'
  },
  {
    value: 50,
    title: '50 Per Page'
  }
]

export const NAME_COLUMN_TITLE = 'Name'
export const INTERVAL_COLUMN_TITLE = 'Interval'
export const INDEX_COLUMN_TITLE = 'Index'
export const STATUS_COLUMN_TITLE = 'Status'
export const ACTIONS_COLUMN_TITLE = 'Actions'

export const TABLE_SORT_FUNCTIONS = {
  [NAME_COLUMN_TITLE]: (array) => array.sort((a, b) => a.content.name - b.content.name),
  [INTERVAL_COLUMN_TITLE]: (array) => array.sort((a, b) => a.content.interval - b.deadline),
  [INDEX_COLUMN_TITLE]: (array) => array.sort((a, b) => a.content.index - b.content.index),
  [STATUS_COLUMN_TITLE]: (array) => array.sort((a, b) => a.content.disabled - b.content.disabled),
}

export const SORT_ICON_PROPS = {
  iconUp: <Up />,
  iconDown: <Down />,
  iconDefault: <div className={styles.sortIcons}><Up/><Down/></div>
}

export const HEADER_COLUMN_TITLES = [
  NAME_COLUMN_TITLE,
  INTERVAL_COLUMN_TITLE,
  INDEX_COLUMN_TITLE,
  STATUS_COLUMN_TITLE
]

export const CONTROLLER_URL = `/${locale}/custom/amp4e_events_input/amp_streams_api_controller/`

export const MODAL_CANCEL_BUTTON = 'Cancel'
export const ADD_MODAL_SUBMIT_BUTTON = 'Add'
export const EDIT_MODAL_SUBMIT_BUTTON = 'Update'
export const CLONE_MODAL_SUBMIT_BUTTON = 'Save'
export const DELETE_MODAL_SUBMIT_BUTTON = 'Delete'

export const CREATE_INPUT_MODAL = 'Add Cisco Secure Malware Analytics'
export const EDIT_INPUT_MODAL = 'Update Cisco Secure Malware Analytics'
export const CLONE_INPUT_MODAL = 'Clone Cisco Secure Malware Analytics'
export const DELETE_INPUT_MODAL = 'Delete Confirmation'

export const getCreateInputValidationSchema = (inputNames, isEdit) => {
  const schema = {
    name: yup
      .string()
      .required('The name is required.')
      .notOneOf(inputNames, 'Name is already in use.')
      .matches(/^[A-Za-z][A-Za-z0-9_]*$/, 'Input Name must start with a letter and followed by alphabetic letters, digits or underscores'),
    interval: yup.string().required('The interval is required.'),
    index: yup.string().required('The Index is required.'),
    threat_grid_host: yup.string().required('The host is required.'),
    api_key: yup.string().required('The API Key is required.'),
    after: yup.string().required('The After field is required.'),
    builtin_system_checkpoint_storage_type: yup.string().required('The type is required.'),
  }

  return yup.object().shape(isEdit ? omit(schema, ['name']) : schema)
}

export const getCreateInputFields = (options, disableName) => ([
  {
    name: 'name',
    label: 'Name',
    helpText: 'Enter a unique name for the data input',
    disabled: disableName
  },
  {
    name: 'interval',
    label: 'Interval',
    helpText: 'Time interval in seconds between API queries. Should be set to 300.'
  },
  {
    name: 'index',
    label: 'Index',
    as: 'select',
    options: [{ view: 'default', value: 'default' }, ...options]
  },
  {
    name: 'threat_grid_host',
    label: 'Threat Grid Host',
    helpText: 'Enter the Threat Grid host the input should connect to'
  },
  {
    name: 'api_key',
    type: 'password',
    label: 'API Key',
    helpText: 'Enter your Threat Grid API Key'
  },
  {
    name: 'after',
    label: 'After',
    helpText: 'The initial after value used when querying the Threat Grid API. Should be 10 minutes ago.'
  },
  {
    name: 'builtin_system_checkpoint_storage_type',
    label: 'Checkpoint type',
    as: 'select',
    options: [
      { value: 'auto', view: 'Auto' },
      { value: 'file', view: 'View' },
      { value: 'optional', view: 'optional' }
    ]
  }
])

export const getCreateInputModalVerbiage = ({ dispatch, options, inputNames }) => ({
  title: CREATE_INPUT_MODAL,
  formProps: {
    validationSchema: getCreateInputValidationSchema(inputNames),
    fields: getCreateInputFields(options),
    onSubmit: values => dispatch(createInput(values)),
    initialValues: {
      name: '',
      interval: 300,
      index: 'default',
      threat_grid_host: 'panacea.threatgrid.com',
      api_key: '',
      after: '10 minutes ago',
      builtin_system_checkpoint_storage_type: 'auto'
    }
  },
  cancel: MODAL_CANCEL_BUTTON,
  submit: ADD_MODAL_SUBMIT_BUTTON
})

export const getEditInputModalVerbiage = ({
  dispatch,
  options,
  inputNames,
  input: {
    name,
    content: {
      interval,
      index,
      threat_grid_host,
      after,
      builtin_system_checkpoint_storage_type
    }
  } }) => ({
  title: EDIT_INPUT_MODAL,
  formProps: {
    validationSchema: getCreateInputValidationSchema(inputNames, true),
    fields: getCreateInputFields(options, true),
    onSubmit: values => dispatch(editInput(values)),
    initialValues: {
      name,
      interval,
      index,
      threat_grid_host,
      api_key: '',
      after,
      builtin_system_checkpoint_storage_type
    }
  },
  cancel: MODAL_CANCEL_BUTTON,
  submit: EDIT_MODAL_SUBMIT_BUTTON
})

export const getCloneInputModalVerbiage = ({
  dispatch,
  options,
  inputNames,
  input: {
    name,
    content: {
      interval,
      index,
      threat_grid_host,
      after,
      builtin_system_checkpoint_storage_type
    }
  } }) => ({
  title: CLONE_INPUT_MODAL,
  formProps: {
    validationSchema: getCreateInputValidationSchema(inputNames),
    fields: getCreateInputFields(options),
    onSubmit: values => dispatch(createInput(values)),
    initialValues: {
      name: '',
      interval,
      index,
      threat_grid_host,
      api_key: '',
      after,
      builtin_system_checkpoint_storage_type
    }
  },
  cancel: MODAL_CANCEL_BUTTON,
  submit: CLONE_MODAL_SUBMIT_BUTTON
})

export const getDeleteInputModalVerbiage = ({ dispatch, input }) => ({
  title: DELETE_INPUT_MODAL,
  cancel: MODAL_CANCEL_BUTTON,
  submit: DELETE_MODAL_SUBMIT_BUTTON,
  body: `Are you sure you want to delete "${input.name}" ?`,
  submitModal: () => dispatch(deleteInput(input))
})
