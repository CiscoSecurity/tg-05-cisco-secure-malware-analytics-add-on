import { Fragment, useState } from 'react'
import { Body, Cell, Row } from '@table-library/react-table-library'
import cx from 'classnames'
import PropTypes from 'prop-types'
import { useDispatch, useSelector } from 'react-redux'

import { Clone, Delete, Down, Edit, Right } from '../../components/Icons/Icons'
import ExpandedView from './ExpandedView'
import { changeInputStatus } from './InputsSlice'
import { showModal } from '../../components/Modal/ModalSlice'
import {
  getCloneInputModalVerbiage,
  getDeleteInputModalVerbiage,
  getEditInputModalVerbiage
} from './constants'
import { createOptions } from './helpers'

import styles from './Inputs.module.scss'

const TableBody = ({ tableList }) => {
  const dispatch = useDispatch()
  const [expandedId, setExpandedId] = useState('')
  const { data: inputs } = useSelector((state) => state.inputs.inputs)
  const { data: indexes } = useSelector((state) => state.inputs.indexes)
  const { data: accounts } = useSelector((state) => state.accounts.accounts)

  const indexOptions = createOptions(indexes)
  const accountOptions = createOptions(accounts)

  const inputNames = inputs?.map(input => input.name)

  return (
    <Body>
      {tableList.map((item) => (
        <Fragment key={item.id}>
          <Row item={item} className="table__row">
            <Cell
              className={cx(styles.expandedCell, 'table__cell')}
              onClick={() => {
                setExpandedId(prevState => item.id === prevState ? '' : item.id)
              }}
            >
              {expandedId === item.id ? <Down /> : <Right/>}
              {item.name}
            </Cell>
            <Cell className="table__cell">{item.content.interval}</Cell>
            <Cell className="table__cell">{item.content.index}</Cell>
            <Cell className="table__cell">
              <label className={cx(styles.switch, 'switch')}>
                <input
                  className="switch__input"
                  type="checkbox"
                  checked={!item.content.disabled}
                  onClick={() => dispatch(changeInputStatus({
                    name: item.name,
                    disabled: !item.content.disabled
                  }))}
                />
                <span className="switch__box"></span>
                <span className="switch__label">
                  {item.content.disabled ? 'Disabled' : 'Enabled'}
                </span>
              </label>
            </Cell>
            <Cell className="table__cell">
              <div className={styles.actionGroup}>
                <div onClick={() => dispatch(showModal(getEditInputModalVerbiage({
                  dispatch, options: indexOptions, inputNames, input: item, accounts: accountOptions
                })))}><Edit /></div>
                <div onClick={() => dispatch(showModal(getCloneInputModalVerbiage({
                  dispatch, options: indexOptions, inputNames, input: item, accounts: accountOptions
                })))}><Clone /></div>
                <div onClick={() => dispatch(showModal(getDeleteInputModalVerbiage({
                  dispatch, input: item
                })))}><Delete /></div>
              </div>
            </Cell>
          </Row>
          {expandedId === item.id && <ExpandedView item={item} />}
        </Fragment>
      ))}
    </Body>
  )
}

TableBody.propTypes = {
  tableList: PropTypes.array
}

export default TableBody
