
# encoding = utf-8

import os
import sys
import time
import datetime
import json

import requests

def validate_input(helper, definition):
    pass

def collect_events(helper, ew):
    try:
        # Retrieve and form proxy settings if enabled
        proxy_settings = helper.get_proxy()
        if proxy_settings:
            # Retrieve proxy related fields
            proxy_username = proxy_settings.get('proxy_username', None)
            proxy_password = proxy_settings.get('proxy_password', None)
            protocol = proxy_settings.get('proxy_type', None)
            proxy_url = proxy_settings.get('proxy_url', None)
            proxy_port = proxy_settings.get('proxy_port', None)
            
            if proxy_username and proxy_password:
                # If auth options provided
                helper.log_info('Proxy enabled with authentication')
                
                proxy_auth = f'{proxy_username}:{proxy_password}'
                proxies = {
                    'https': f'{protocol}://{proxy_auth}@{proxy_url}:{proxy_port}/',
                    'http': f'{protocol}://{proxy_auth}@{proxy_url}:{proxy_port}/',
                    
                }
            else:
                # If no auth options
                helper.log_info('Proxy enabled without authentication')
                proxies = {
                    'https': f'{protocol}://{proxy_url}:{proxy_port}/',
                    'http': f'{protocol}://{proxy_url}:{proxy_port}/',
                }
        else:
            helper.log_info('Proxy not enabled')
            proxies = None
        
        # Retrieve add-on settings
        host = helper.get_arg('cisco_sma_host')
        api_key = helper.get_arg('api_key')
        after = helper.get_arg('after')
        
        api_url = f'https://{host}/api/v2/search/submissions'
        params = {
            'org_only': True,
            'sort_by': 'submitted_at',
            'sort_order': 'dsc',
            'state': 'succ OR fail',
            'limit': 1000,
            'after': after,
        }
        headers = {
            'Authorization': f'Bearer {api_key}'
        }
        
        session = requests.Session()
        
        # Make request to Cisco Secure Malware Analytics API
        response = session.get(url=api_url, params=params, headers=headers, proxies=proxies).json()
        
        items = response.get('data').get('items')
        helper.log_info(f'Retrieved {len(items)} events.')
        
        index = helper.get_output_index()
        for item in items:
            data = json.dumps(item.get('item'))
            event = helper.new_event(
                source=helper.get_input_type(), 
                index=index, 
                sourcetype=helper.get_sourcetype(), 
                data=data,
            )
            ew.write_event(event)
            helper.log_info(f'Writing event to {index} index: {event}')
    except Exception as e:
        helper.log_error(e)
